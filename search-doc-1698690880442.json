{"searchDocs":[{"title":"Contribution","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/contribution","content":"Contribution","keywords":"","version":"Next"},{"title":"Create pipelines patterns","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/create-pipelines-patterns","content":"Create pipelines patterns","keywords":"","version":"Next"},{"title":"Customizing security","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/customizing-security","content":"Customizing security","keywords":"","version":"Next"},{"title":"Create custom templates","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/create-custom-template","content":"Create custom templates","keywords":"","version":"Next"},{"title":"Design your platform","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/design-your-platform","content":"Design your platform","keywords":"","version":"Next"},{"title":"FAQ","type":0,"sectionRef":"#","url":"/opa-test/docs/faq","content":"FAQ Q. What is OPA on AWS? A. OPA on AWS brings AWS cloud closer to your developers. The platform allows enterprise to build environments and applications on AWS without requiring to upskill on cloud expertise. OPA on AWS provides a productive secure and scalable experience for non-cloud developers. Q. Why did we have to build this thing? A. Enterprise are challenged to integrate with AWS while adhering to their standards, security guardrails and compliance. In addition, cloud engineers are a scarce resource that does not scale. Using platform engineering this gap is shorten thus enabling enterprise to improve their developer experience and scales the use of AWS Services securely. Q. Is OPA on AWS an AWS Service? A. No, OPA on AWS is an Open source Platform reference implementation. Supporting full integration with AWS Services for enterprises. Since OPA on AWS is using native AWS Services you get all the benefits and scale of AWS scales with the platform but with an improve developer experience. Q. Who is OPA for? A. Enterprises organizations with many developer teams who wish to scale their use of AWS cloud and migrate hundreds/thousands of applications Q. Can AWS Help me to use OPA? A. Yes, Please reach out to us at fsi-pace-pe@amazon.com Q. How will it be supported? is it an official offering? A. OPA on AWS at the moment is an open source project contributed by AWS and licensed as Apache-2.0 Q. What are the benefits for using OPA? A. A better developer experience and faster way to scale the use of AWS Services for enterprises Q. What are the requirements to get started on Opa? A. Please read our documentation Getting started Q. What is the price of Opa? A. OPA on AWS is free open source project. However the use of AWS Services is as per the service pricing of each service you use Q. Is there a roadmap? A. We publish list of features and what is in progress on features Q. What if backstage goes away? A. Backstage was adopted and matured as CNCF project - it fit as a good starting point to build your platform and integration with AWS . using backstage.io helps to expedite the development but more importantly it allows us to benefit from 100+ plugins(which customers may be using) and large community support(20k+) Q. How can OPA on AWS accelerate applications migration? A. Please see our Migration page Q. Is it going to be hard to upgrade OPA on AWS or upgrade Backstage? A. We list the last tested version of backstage with OPA on AWS Plugins. the solution is decoupled from backstage therefore it should be possible to upgrade backstage and install the plugins afterwards. However backstage may introduce breaking changes and therefore we publish the last tested plugin version Q. how do I train my team? what resources are available? A. We have 3 main sources - Documentation, YouTube videos and Workshop Q. Will AWS supply templates for me to use? will they maintain them? A. We provide many samples and examples for templates, for: providers, apps and resources Q. Will this make the DevOps team obsolete A. No, The idea is that teams will own their infrastructure and applications and reduce the bottleneck from your devops team Q. How secure is this solution? Has it been reviewed by a third party? A. The solution was designed for a large financial customer adhering to financial services customer regulation and AWS best practices Q. Whats the difference between OPA and AWS console A. The focus is the developer experience not the complete depth and functionality of AWS Services which requires cloud skills Q. What is an Internal Developing Platform (IDP)? A. Please refer to platformengineering.org Q. Do you have a CLI? A. Not yet - Please see features Have an additional question? reach out to us at fsi-pace-pe@amazon.com","keywords":"","version":"Next"},{"title":"Features","type":0,"sectionRef":"#","url":"/opa-test/docs/features","content":"","keywords":"","version":"Next"},{"title":"Version 0.2​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#version-02","content":"Feature\tScope\tDescriptionDynamic environment provider provisioning\tPlatform Engineer\tCreate unlimited number of providers on multiple accounts and regions ECS environment provider\tPlatform Engineer\tCreate an ECS(Elastic container servicer) based provider Serverless environment provider\tPlatform Engineer\tCreate a serverless based provider Abstracted AWS environment\tPlatform Engineer\tCreate a environment of which applications and resources can be created Application pipeline\tPlatform Engineer\tCreate a pipeline for each application to support IAC provisioning and code change stage Environment Deployment pipeline\tPlatform Engineer\tCreate a pipeline to deploy the code base of an application to another environment Resource Binding\tPlatform Engineer\tAllow Binding resources to application to provide access and sharing capabilities for AWS resources Deploy to additional environments\tPlatform Engineer\tAllow the deployment of an application to additional environments Environments selector\tPlatform Engineer\tToggle between the environments of which the application is deployed and present relevant information for the current selected environment Segregated auditing\tPlatform Engineer\tAudit actions from platform and pipeline to a segregated auditing table of the target environment Environment level\tPlatform Engineer\tAllow to define a number representing the level of the environment thus creates hierarchies that are used for deployments Deployment requires approval\tPlatform Engineer\tConfigure how the pipelines should execute against an environment automatic / require approval Delete app\tPlatform Engineer\tRemove an application from an environment Delete provider\tPlatform Engineer\tRemove a provider Centralized pipelines\tPlatform Engineer\tLoad pipelines dynamically from a centralized repository Component Pending page\tPlatform Engineer\tPresent a partial page while the component IAC pipeline is still processing ","version":"Next","tagName":"h2"},{"title":"Coming up​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#coming-up","content":"Feature\tScope\tDescription\tTimelineEKS environment provider\tPlatform Engineer\tCreate a Kubernetes based provider\tJan 2024 Environment Binding\tPlatform Engineer\tBind Environments to allow network communication across multiple VPC's through AWS Transit gateway\tFebruary 2024 ","version":"Next","tagName":"h2"},{"title":"Provider examples and templates​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#provider-examples-and-templates","content":"Feature\tDescription\tTypeAWS ECS Environment Provider\ta provider IAC for ECS runtime\tProvider AWS Serverless Environment Provider\ta provider IAC for Serverless runtime\tProvider AWS RDS Database\tan RDS database template\tResource Node.js Terraform Web App\ta node.js application provisioning by terraform\tApplication Node.js Express Web App With RDS\ta node.js application with a baked in starter code to connect to RDS database\tApplication Node.js Express Web App\ta node.js application\tApplication Python Flask starter application\ta python flask web server application\tApplication Serverless REST API (TypeScript)\ta lambda based serverless REST API application template for typescript\tApplication Java Spring Boot Web Service\ta java springboot application\tApplication ","version":"Next","tagName":"h2"},{"title":"Backlog​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#backlog","content":"Feature\tScope\tDescription ","version":"Next","tagName":"h2"},{"title":"Deploy the Platform","type":0,"sectionRef":"#","url":"/opa-test/docs/getting-started/deploy-the-platform","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Deploy the Platform","url":"/opa-test/docs/getting-started/deploy-the-platform#prerequisites","content":"","version":"Next","tagName":"h2"},{"title":"Software prerequisites​","type":1,"pageTitle":"Deploy the Platform","url":"/opa-test/docs/getting-started/deploy-the-platform#software-prerequisites","content":"The following software is required to perform the installation of the platform solution: node.js - 18.16 or higheryarn - v1.xaws-cliaws-cdkjqdockergit note The installation instructions documented here were tested using the following versions: Backstage v1.17node v18.17npm 9.6.7cdk v2.95yarn 1.22.19 ","version":"Next","tagName":"h3"},{"title":"Solution Platform prerequisites​","type":1,"pageTitle":"Deploy the Platform","url":"/opa-test/docs/getting-started/deploy-the-platform#solution-platform-prerequisites","content":"Prior to installing the OPA solution platform, you will need to ensure that the following items are configured and available: AWS Account ID and region - The solution will be installed into an AWS account and region. You will need the 12-digit account ID and must be able to log into the account with sufficient permissions to provision infrastructure resources. GitLab Community Edition EC2 AMI id - The solution will install a small Gitlab instance where application source code will be stored. The AWS Marketplace provides a free, community edition of Gitlab used by the solution. You will need to subscribe to the marketplace offering. Search for &quot;GitLab Community Edition&quot; by GitLab or use a direct link: https://aws.amazon.com/marketplace/pp/prodview-w6ykryurkesjqOnce your account is subscribed to the Gitlab CE Marketplace offering, save the EC2 AMI for the appropriate region from the &quot;Launch new instance&quot; page as shown in the image below (do not actually launch an instance as this will be done for you during installation). Alternatively, you can query for the AMI using the AWS CLI (substitute the apporpriate region value for the --region option): aws ec2 describe-images --owners &quot;aws-marketplace&quot; --filters &quot;Name=name,Values=*GitLab CE 16.4.0*&quot; --query 'Images[].[ImageId]' --region us-west-2 --output text GitLab Runner image - The solution will set up an EC2 instance as a GitLab Runner to execute GitLab CI/CD pipelines. The Amazon-provided &quot;Jammy&quot; image will be used for the runner image. Save the EC2 AMI for the appropriate region for this AMI. The following AMI command will return the appropriate image id. Replace the value for &quot;--region&quot; to reflect your target region: aws ec2 describe-images --owners &quot;amazon&quot; --filters &quot;Name=name,Values=*ubuntu-jammy-22.04-amd64-server-20230208*&quot; --query 'Images[].[ImageId]' --region us-west-2 --output text Route 53 Hosted Zone - The solution will ensure secure communcations and set up a certificate for your defined domain. Ensure that a public hosted zone is set up in your account. See the AWS documentation for creating a public hosted zone Okta authentication - The solution uses Okta and RoadieHQ Backstage plugins for authentication of users and groups. You will need a client id, client secret, and API key for configuration of the solution. If you wish to use Okta for authentication, you can sign up a free Workforce Identity Cloud developer account. Once the account is set up, you will need to configure an Okta API key for the RoadieHQ backend catalog pluginA client id and secret are required to set up a Backstage Okta authentication provider. See the Backstage Okta auth documentation for more details. Other IDPs are supported and could be substituted using different plugins. Configuring alternative authentication is not covered in this README, but the Backstage Authentication documentation provides details for other providers. ","version":"Next","tagName":"h3"},{"title":"Installation​","type":1,"pageTitle":"Deploy the Platform","url":"/opa-test/docs/getting-started/deploy-the-platform#installation","content":"Clone the repository and change to the repository location git clone https://github.com/awslabs/app-development-for-backstage-io-on-aws.git cd app-development-for-backstage-io-on-aws Configure the solution Copy the config/sample.env file to config/.envEdit the config/.env file and provide values for all of the environment variables. The file is commented to explain the purpose of the variables and requires some of the information from the Solution Platform Prerequisites section above. ❗ The SECRET_GITLAB_CONFIG_PROP_apiToken variable does not need to be provided. This will be automatically configured during installation after the platform is deployed. Perform the installation Run make install After the installation completes, the application will start up. Open a browser and navigate to the 'OPA on AWS' endpoint using the Route 53 hosted zone name that you configured (e.g. https://${R53_HOSTED_ZONE_NAME}). If any errors occur during installation, please review the install_{datestamp}.log file for details. The Makefile target will automatically perform the following actions: Install and configure BackstageInstall/update CDKDeploy the solution platform AWS infrastructureUpdate the configuration with GitLab informationPush a sample repository to GitLabBuild and deploy the Backstage image to AWS ","version":"Next","tagName":"h2"},{"title":"FAQs​","type":1,"pageTitle":"Deploy the Platform","url":"/opa-test/docs/getting-started/deploy-the-platform#faqs","content":"Q. I don't use Okta. Can i change the identity provider to another one? A. Yes. Backstage supports many IDPs. Once you configure Backstage for your chosen IdP, make sure Backstage catalog is synced with the users and groups from your IDP. Q. I want to use another source control that is not GitLab. How can i do that? A. Backstage supports multiple source control providers which can be integrated through the Backstage config. OPA uses GitLab for several usage scenarios which you will need to migrate to another source control provider: Storing application source codeStoring template source codeStoring pipelines jobs and orchestrationUpdate the Client API plugin that interacts with GitLab to the new source control provider Q. I'm using Terraform, can I use this solution with Terraform to provision application resources? A. Yes. We provide a Node.js Terraform application for demonstration. You may also write your own provider with Terraform. For more Q.A. please see our F.A.Q Page ","version":"Next","tagName":"h2"},{"title":"Intro","type":0,"sectionRef":"#","url":"/opa-test/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is OPA on AWS?​","type":1,"pageTitle":"Intro","url":"/opa-test/docs/intro#what-is-opa-on-aws","content":"OPA on AWS brings AWS cloud closer to your developers. The platform allows enterprise to build environments and applications on AWS without requiring to upskill on cloud expertise. OPA on AWS provides a reference implementation for an enterprise grade fully integrated platform. Improving the developer work with a secure and scalable experience for non-cloud developers. Based on Backstage.io which is an open-source platform enabling a well built and well-designed user interface for OPA on AWS. The Backstage.io platform itself has been adopted by over 900 companies as their primary developer portal in the past 3 years and has over 100 plugins available for its end users. OPA on AWS takes Backstage.io to the next level by seamlessly integrating it with AWS and packaging it together for enterprise use. ","version":"Next","tagName":"h2"},{"title":"Why did we build OPA on AWS?​","type":1,"pageTitle":"Intro","url":"/opa-test/docs/intro#why-did-we-build-opa-on-aws","content":"Enterprise are challenged to integrate with AWS Services while adhering to their operation standards, security guardrails and compliance. In addition, cloud engineers and dev-ops teams are a scarce resource that does not scale. Platform engineering helps to reduce this bottleneck and to enable enterprises to scale and improve their developer experience and the use of AWS Services securely. ","version":"Next","tagName":"h2"},{"title":"What's included?​","type":1,"pageTitle":"Intro","url":"/opa-test/docs/intro#whats-included","content":"The open source solution includes the following: Complete source code to provision a new platform.Templates and examples to create environments, providers, applications and AWS resources.Backstage plugins and plugins source code.Predefined CICD centralized pipelines for more than 12 common patterns.Documentation, support videos and a workshop. For a complete list of features click here ","version":"Next","tagName":"h2"},{"title":"Getting Started​","type":1,"pageTitle":"Intro","url":"/opa-test/docs/intro#getting-started","content":"Get started by creating a new platform ","version":"Next","tagName":"h2"},{"title":"Migration from on-prem to OPA on AWS","type":0,"sectionRef":"#","url":"/opa-test/docs/migrations/migration-onprem","content":"Migration from on-prem to OPA on AWS","keywords":"","version":"Next"},{"title":"Migration from OpenShift to OPA on AWS","type":0,"sectionRef":"#","url":"/opa-test/docs/migrations/migration-openshift","content":"Migration from OpenShift to OPA on AWS","keywords":"","version":"Next"},{"title":"Migration from PCF to OPA on AWS","type":0,"sectionRef":"#","url":"/opa-test/docs/migrations/migration-pcf","content":"Migration from PCF to OPA on AWS","keywords":"","version":"Next"},{"title":"Entities","type":0,"sectionRef":"#","url":"/opa-test/docs/techdocs/entities","content":"Entities Docusaurus can manage multiple versions of your docs.","keywords":"","version":"Next"},{"title":"Architecture","type":0,"sectionRef":"#","url":"/opa-test/docs/techdocs/architecture","content":"","keywords":"","version":"Next"},{"title":"High-Level Architecture​","type":1,"pageTitle":"Architecture","url":"/opa-test/docs/techdocs/architecture#high-level-architecture","content":"In the below diagram, the top row/box depicts an AWS account that is hosting Backstage itself on ECS with Fargate. Backstage makes use of an Postgress RDS database. There are also EC2 instances in this account that run GitLab. These EC2s are configured for reference implementation purposes and are not intended for production use, as is. The second row of the below diagram depicts runtime environments that have been set up to run workloads on various AWS accounts and regions. Each workload account has an IAM role configured for operations and provisioning. The Backstage back end and the CICD pipelines running on the top row account will assume the IAM roles in the workload accounts in order to interact with them. Depending on the workload type (ECS, EKS, Serverless), different resources will be created in the workload accounts. Each type has a VPC and an audit table, but only the containerized workload types will include a cluster. ","version":"Next","tagName":"h2"},{"title":"GitLab CICD Runner​","type":1,"pageTitle":"Architecture","url":"/opa-test/docs/techdocs/architecture#gitlab-cicd-runner","content":"This architecture illustrates how a GitLab CICD pipeline executes in order to build an application container image and publish it to an Elastic Container Registry repository.  ","version":"Next","tagName":"h2"},{"title":"Specific use case architecture diagrams​","type":1,"pageTitle":"Architecture","url":"/opa-test/docs/techdocs/architecture#specific-use-case-architecture-diagrams","content":"Developer creates new app Using Backstage UI, the developer chooses an application type they want to build Once selected, the developer fills in all the required details of the template including ownership and AWS environment The action triggered by the developer results in a new Git repository being created and an accompanying CICD pipeline. The pipeline will assume the IAM provisioning role for the the workload account and will execute Infrastructure as Code that is configured in the application template. After running the IaC, the pipeline will build the app and make it available for deployment by pushing an image into the ECR container registry or storing built artifacts in S3. When the developer commits new changes to the Git repository, the CICD pipeline will automatically be triggered. The below diagram depicts the creation and deployment of a serverless application.  Multi Stage/Environment CICD  ","version":"Next","tagName":"h2"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/opa-test/docs/techdocs/manage-docs-versions","content":"","keywords":"","version":"Next"},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/opa-test/docs/techdocs/manage-docs-versions#create-a-docs-version","content":"Release a version 1.0 of your project: npm run docusaurus docs:version 1.0  The docs folder is copied into versioned_docs/version-1.0 and versions.json is created. Your docs now have 2 versions: 1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs ","version":"Next","tagName":"h2"},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/opa-test/docs/techdocs/manage-docs-versions#add-a-version-dropdown","content":"To navigate seamlessly across versions, add a version dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, };  The docs version dropdown appears in your navbar:  ","version":"Next","tagName":"h2"},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/opa-test/docs/techdocs/manage-docs-versions#update-an-existing-version","content":"It is possible to edit versioned docs in their respective folder: versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello ","version":"Next","tagName":"h2"},{"title":"Plugins","type":0,"sectionRef":"#","url":"/opa-test/docs/techdocs/plugins","content":"Plugins Docusaurus can manage multiple versions of your docs.","keywords":"","version":"Next"},{"title":"How to bind a resource to an app","type":0,"sectionRef":"#","url":"/opa-test/docs/tutorials/bind-resource","content":"","keywords":"","version":"Next"},{"title":"Create an Environment Provider​","type":1,"pageTitle":"How to bind a resource to an app","url":"/opa-test/docs/tutorials/bind-resource#create-an-environment-provider","content":"Lets now use AWS ECS Environment Provider template to provision our AWS Elastic Container Service(ECS) runtime environment. If you have completed the introduction section, you should be on the OPA landing page. Hit the Create.. menu on the left and Choose the AWS ECS Environment Provider template.  Provide input parameters to tailor the environment provider resources. Parameter\tValue\tDescriptionName\tbanking-dev-provider\tA unique identifier for the environment provider Prefix\tbankecs\tA short prefix used for AWS resource creation Description\tA Dev environment provider for containerized Retail Banking applications\tDescribes what the environment provider's purpose will be Owner\tSelect 'developers'\tThe group or user that will be responsible for the entity AWS Account Number\tget this value from the aws-account-id key on the Event Outputs section of the Event Dashboard\tThe AWS account where the environment provider will be created AWS Region\tSelect 'US East (N. Virginia)' Do not select any other region for the workshop\tThe AWS region to provision resources in Environment role arn\tget this value from the opa-env-provisioning-role-arn key on the Event Outputs tab of the Event Dashboard\tThe IAM role to be used for provisioning AWS resources in the target account and region CIDR\t10.0.0.0/24 (default)\tThe CIDR block to be provisioned for the VPC associated with the ECS cluster to be created  3. Select Next Step and Provide Repository information In this step we provide information about the git repository where the Environment Provider source files will be published as part of executing the Software Template. Parameter\tValue\tDescriptionHost:\tdefault value\tThe GitLab host name Owner:\tdefault value\tThe GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project Repository:\tbanking-dev-provider\tThe name for the git repository  4. Select Next Step, review your inputs and select Create  5. Environment Provider Entity Creation Upon clicking Create, the template performs automated action steps. It gets info from AWS, fetches our ECS code and other configuration files from the reference folder, changes specific parts inside these files, and sets up a new git folder to store the files.  Once this git folder is ready, a CI/CD process will start automatically. It will use the code to set up your new ECS platform right away! Now, let's proceed to the next step to an environment using the provider entity we just created. ","version":"Next","tagName":"h2"},{"title":"Create an Environment​","type":1,"pageTitle":"How to bind a resource to an app","url":"/opa-test/docs/tutorials/bind-resource#create-an-environment","content":"To create an Environment Entity we will use the AWS Environment template from the software catalog section. 1. On the OPA on AWS website, navigate to the Create.. menu. From the list of available templates, choose the AWS Environment template card. 2. Provide input parameters to tailor the environment entity and click Next Step Parameter\tValue\tDescriptionName\tbanking-dev\tA unique identifier for the environment Short Name\tbankdev\tA short identifier used for identification of environments Description\tBanking Development environment for containerized applications deployed to ECS\tDescribes the purpose of the environment Environment Type\tAWS ECS\tSpecifies the type of applications that can be deployed and managed in this environment Deployment Requires Approval\tNo\tAllows for blocking a CI/CD pipeline until approval is received. This is often set to 'No' for development and test, but 'Yes' for production Owner\tdevelopers\tThe group or user that will be responsible for the entity. Account Type\tSingle-account\tIndicates whether the environment supports one or more accounts Region Type\tSingle-region\tIndicates whether the environment supports one or more regions Category\tDevelopment\tIdentifies the intended purpose of the environment (dev, test, prod, etc) Classification\tpublic\tIdentifies visibility of the environment (public-facing, internal-facing, or private) System\tbanking\tIdentifies the relationship of this environment to a larger system. This can be used to group environments together. Heirarchy of the Environment\t1\tValue used to determine relative ordering for environments. Typical approaches are to use lower numbers for development and higher numbers for production. Providers\tbanking-dev-provider\tSelects one or more environment providers to attach to this environment. In this workshop, there is only one environment provider available, so the drop-down list is disabled and the available environment provider will be used.  2. Hit Next Step and fill in the remaining information: Parameter\tValue\tDescriptionHost\tdefault value\tThe GitLab host name Owner\tdefault value\tThe GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project Repository\tbanking-dev\tThe name for the git repository 3. Hit Next Step and review your inputs. Hit Create  4. The template scaffolding action will fetch a catalog.yaml file (used to define entities), replace the placeholders with our input we just set, push the file to a new repo and register it to OPA on AWS. Now that our Environment Entity is created, our developers can discover and point to the it during their app scaffolding process. Let's proceed to the next step and explore the ECS Environment Entity we just created. ","version":"Next","tagName":"h2"},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/opa-test/docs/techdocs/translate-your-site","content":"","keywords":"","version":"Next"},{"title":"Create Apps","type":0,"sectionRef":"#","url":"/opa-test/docs/tutorials/create-app","content":"Create Apps 1. On the OPA on AWS website, navigate to the Create... menu. Search and choose Node.js Microservice. 2. Provide application information and select Next Step Parameter\tValue\tDescriptionName\tbanking-app\tA unique identifier for the application Description\tNode.js banking application running on ECS\tDescribes what the appplications's purpose will be Owner\tSelect 'developer'\tThe group or user that will be responsible for the entity AWS Environment\tthe dev-environment will be pre-selected since it is the only environment available\tThe AWS Environment in which you want to deploy your application to. The environment that we created in the previous step will already be selected for you 3. Provide Repository information and select Next Step Parameter\tValue\tDescriptionHost\tdefault value\tThe GitLab host name Owner Available\tdefault value\tThe GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project Repository\tbanking-app-repo\tThe name for the git repository 4. Review your inputs and select Create Your Application will begin to deploy! A Task Activity view will show you the progress of all of the actions executed to build out your application. This includes gathering environment information, creating secrets, scaffolding a new repository, creating an access token for the repo, and registering the entity with backstage.","keywords":"","version":"Next"},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/opa-test/docs/techdocs/translate-your-site#configure-i18n","content":"Modify docusaurus.config.js to add support for the fr locale: docusaurus.config.js module.exports = { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };  ","version":"Next","tagName":"h2"},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/opa-test/docs/techdocs/translate-your-site#translate-a-doc","content":"Copy the docs/intro.md file to the i18n/fr folder: mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md  Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French. ","version":"Next","tagName":"h2"},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/opa-test/docs/techdocs/translate-your-site#start-your-localized-site","content":"Start your site on the French locale: npm run start -- --locale fr  Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated. caution In development, you can only use one locale at a same time. ","version":"Next","tagName":"h2"},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/opa-test/docs/techdocs/translate-your-site#add-a-locale-dropdown","content":"To navigate seamlessly across languages, add a locale dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, };  The locale dropdown now appears in your navbar:  ","version":"Next","tagName":"h2"},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/opa-test/docs/techdocs/translate-your-site#build-your-localized-site","content":"Build your site for a specific locale: npm run build -- --locale fr  Or build your site to include all the locales at once: npm run build  ","version":"Next","tagName":"h2"},{"title":"Create Resources","type":0,"sectionRef":"#","url":"/opa-test/docs/tutorials/create-resources","content":"","keywords":"","version":"Next"},{"title":"Creating an RDS Database resource​","type":1,"pageTitle":"Create Resources","url":"/opa-test/docs/tutorials/create-resources#creating-an-rds-database-resource","content":"1. On the OPA on AWS website, navigate to the Create... menu. Search and choose AWS RDS Database.  2. Provide resource information and select Next Step Parameter\tValue\tDescriptionName\tpayment-db\tA unique identifier for the database Description\tA database for payment transactions\tDescribes what the database's purpose will be Owner\tSelect 'developer'\tThe group or user that will be responsible for the entity  3. Provide deployment information for the resource and select Next Step Parameter\tValue\tDescriptionAWS Environment\tthe dev-environment will be pre-selected since it is the only environment available\tThe AWS Environment in which you want to deploy your application to. The environment that we created in the previous step will already be selected for you  4. Provide database configuration and select Next Step Parameter\tValue\tDescriptionDatabase Name\tpaymentsdb\tThe name of a default database to create in the RDS instance Object Name\tuser\tThe name of the object that you will track in the default database. Database Engine\tSelect 'PostgreSQL'\tThe engine of the SQL database Database Size\tSelect 'Small (20GB)'\tThe size of the database that will be deployed  5. Provide Repository information and select Next StepChoose a repository for this database IAC source and entity information - you can use payments-db 6. Create the database  ","version":"Next","tagName":"h2"},{"title":"Create Environments","type":0,"sectionRef":"#","url":"/opa-test/docs/tutorials/create-environments","content":"","keywords":"","version":"Next"},{"title":"Create an Environment Provider​","type":1,"pageTitle":"Create Environments","url":"/opa-test/docs/tutorials/create-environments#create-an-environment-provider","content":"Lets now use AWS ECS Environment Provider template to provision our AWS Elastic Container Service(ECS) runtime environment. If you have completed the introduction section, you should be on the OPA landing page. Hit the Create.. menu on the left and Choose the AWS ECS Environment Provider template.  Provide input parameters to tailor the environment provider resources. Parameter\tValue\tDescriptionName\tbanking-dev-provider\tA unique identifier for the environment provider Prefix\tbankecs\tA short prefix used for AWS resource creation Description\tA Dev environment provider for containerized Retail Banking applications\tDescribes what the environment provider's purpose will be Owner\tSelect 'developers'\tThe group or user that will be responsible for the entity AWS Account Number\tget this value from the aws-account-id key on the Event Outputs section of the Event Dashboard\tThe AWS account where the environment provider will be created AWS Region\tSelect 'US East (N. Virginia)' Do not select any other region for the workshop\tThe AWS region to provision resources in Environment role arn\tget this value from the opa-env-provisioning-role-arn key on the Event Outputs tab of the Event Dashboard\tThe IAM role to be used for provisioning AWS resources in the target account and region CIDR\t10.0.0.0/24 (default)\tThe CIDR block to be provisioned for the VPC associated with the ECS cluster to be created  3. Select Next Step and Provide Repository information In this step we provide information about the git repository where the Environment Provider source files will be published as part of executing the Software Template. Parameter\tValue\tDescriptionHost:\tdefault value\tThe GitLab host name Owner:\tdefault value\tThe GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project Repository:\tbanking-dev-provider\tThe name for the git repository  4. Select Next Step, review your inputs and select Create  5. Environment Provider Entity Creation Upon clicking Create, the template performs automated action steps. It gets info from AWS, fetches our ECS code and other configuration files from the reference folder, changes specific parts inside these files, and sets up a new git folder to store the files.  Once this git folder is ready, a CI/CD process will start automatically. It will use the code to set up your new ECS platform right away! Now, let's proceed to the next step to an environment using the provider entity we just created. ","version":"Next","tagName":"h2"},{"title":"Create an Environment​","type":1,"pageTitle":"Create Environments","url":"/opa-test/docs/tutorials/create-environments#create-an-environment","content":"To create an Environment Entity we will use the AWS Environment template from the software catalog section. 1. On the OPA on AWS website, navigate to the Create.. menu. From the list of available templates, choose the AWS Environment template card. 2. Provide input parameters to tailor the environment entity and click Next Step Parameter\tValue\tDescriptionName\tbanking-dev\tA unique identifier for the environment Short Name\tbankdev\tA short identifier used for identification of environments Description\tBanking Development environment for containerized applications deployed to ECS\tDescribes the purpose of the environment Environment Type\tAWS ECS\tSpecifies the type of applications that can be deployed and managed in this environment Deployment Requires Approval\tNo\tAllows for blocking a CI/CD pipeline until approval is received. This is often set to 'No' for development and test, but 'Yes' for production Owner\tdevelopers\tThe group or user that will be responsible for the entity. Account Type\tSingle-account\tIndicates whether the environment supports one or more accounts Region Type\tSingle-region\tIndicates whether the environment supports one or more regions Category\tDevelopment\tIdentifies the intended purpose of the environment (dev, test, prod, etc) Classification\tpublic\tIdentifies visibility of the environment (public-facing, internal-facing, or private) System\tbanking\tIdentifies the relationship of this environment to a larger system. This can be used to group environments together. Heirarchy of the Environment\t1\tValue used to determine relative ordering for environments. Typical approaches are to use lower numbers for development and higher numbers for production. Providers\tbanking-dev-provider\tSelects one or more environment providers to attach to this environment. In this workshop, there is only one environment provider available, so the drop-down list is disabled and the available environment provider will be used.  2. Hit Next Step and fill in the remaining information: Parameter\tValue\tDescriptionHost\tdefault value\tThe GitLab host name Owner\tdefault value\tThe GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project Repository\tbanking-dev\tThe name for the git repository 3. Hit Next Step and review your inputs. Hit Create  4. The template scaffolding action will fetch a catalog.yaml file (used to define entities), replace the placeholders with our input we just set, push the file to a new repo and register it to OPA on AWS. Now that our Environment Entity is created, our developers can discover and point to the it during their app scaffolding process. Let's proceed to the next step and explore the ECS Environment Entity we just created. ","version":"Next","tagName":"h2"},{"title":"How to deploy an app to another environment","type":0,"sectionRef":"#","url":"/opa-test/docs/tutorials/deploy-app-env","content":"","keywords":"","version":"Next"},{"title":"Creating an RDS Database resource​","type":1,"pageTitle":"How to deploy an app to another environment","url":"/opa-test/docs/tutorials/deploy-app-env#creating-an-rds-database-resource","content":"1. On the OPA on AWS website, navigate to the Create... menu. Search and choose AWS RDS Database.  2. Provide resource information and select Next Step Parameter\tValue\tDescriptionName\tpayment-db\tA unique identifier for the database Description\tA database for payment transactions\tDescribes what the database's purpose will be Owner\tSelect 'developer'\tThe group or user that will be responsible for the entity  3. Provide deployment information for the resource and select Next Step Parameter\tValue\tDescriptionAWS Environment\tthe dev-environment will be pre-selected since it is the only environment available\tThe AWS Environment in which you want to deploy your application to. The environment that we created in the previous step will already be selected for you  4. Provide database configuration and select Next Step Parameter\tValue\tDescriptionDatabase Name\tpaymentsdb\tThe name of a default database to create in the RDS instance Object Name\tuser\tThe name of the object that you will track in the default database. Database Engine\tSelect 'PostgreSQL'\tThe engine of the SQL database Database Size\tSelect 'Small (20GB)'\tThe size of the database that will be deployed  5. Provide Repository information and select Next StepChoose a repository for this database IAC source and entity information - you can use payments-db 6. Create the database  ","version":"Next","tagName":"h2"},{"title":"Videos","type":0,"sectionRef":"#","url":"/opa-test/docs/videos","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#getting-started","content":"Get started by creating a new site. Or try Docusaurus immediately with docusaurus.new. ","version":"Next","tagName":"h2"},{"title":"What you'll need​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#what-youll-need","content":"Node.js version 16.14 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies. ","version":"Next","tagName":"h3"},{"title":"Deploy a new platform​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#deploy-a-new-platform","content":"Generate a new Docusaurus site using the classic template. The classic template will automatically be added to your project after you run the command: npm init docusaurus@latest my-website classic  You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor. The command also installs all necessary dependencies you need to run Docusaurus. ","version":"Next","tagName":"h2"},{"title":"Start building applications​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#start-building-applications","content":"Run the development server: cd my-website npm run start  The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there. The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/. Open docs/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes. ","version":"Next","tagName":"h2"},{"title":"How to operate my app","type":0,"sectionRef":"#","url":"/opa-test/docs/tutorials/operate-app","content":"How to operate my app 1. On the OPA on AWS website, navigate to the Create... menu. Search and choose Node.js Microservice. 2. Provide application information and select Next Step Parameter\tValue\tDescriptionName\tbanking-app\tA unique identifier for the application Description\tNode.js banking application running on ECS\tDescribes what the appplications's purpose will be Owner\tSelect 'developer'\tThe group or user that will be responsible for the entity AWS Environment\tthe dev-environment will be pre-selected since it is the only environment available\tThe AWS Environment in which you want to deploy your application to. The environment that we created in the previous step will already be selected for you 3. Provide Repository information and select Next Step Parameter\tValue\tDescriptionHost\tdefault value\tThe GitLab host name Owner Available\tdefault value\tThe GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project Repository\tbanking-app-repo\tThe name for the git repository 4. Review your inputs and select Create Your Application will begin to deploy! A Task Activity view will show you the progress of all of the actions executed to build out your application. This includes gathering environment information, creating secrets, scaffolding a new repository, creating an access token for the repo, and registering the entity with backstage.","keywords":"","version":"Next"}],"options":{"id":"default"}}