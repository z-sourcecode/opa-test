{"searchDocs":[{"title":"Contribution","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/contribution","content":"Contribution Work in progress","keywords":"","version":"Next"},{"title":"Create pipelines patterns","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/create-pipelines-patterns","content":"Create pipelines patterns Work in progress","keywords":"","version":"Next"},{"title":"Create custom templates","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/create-custom-template","content":"Create custom templates Work in progress","keywords":"","version":"Next"},{"title":"Customizing security","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/customizing-security","content":"Customizing security Work in progress","keywords":"","version":"Next"},{"title":"Design your platform","type":0,"sectionRef":"#","url":"/opa-test/docs/diy/design-your-platform","content":"Design your platform Work in progress","keywords":"","version":"Next"},{"title":"FAQ","type":0,"sectionRef":"#","url":"/opa-test/docs/faq","content":"FAQ What is OPA on AWS?​ Orchestrate Platforms and Applications (OPA) on AWS is an open source reference implementation that ties together AWS services into an enterprise ready solution. By abstracting AWS services, OPA on AWS allows application developers to focus on what they do best – writing application logic code, all while allowing platform engineering teams to enforce internal guardrails and best practices at scale. OPA on AWS provides a productive and efficient experience for non-cloud developers and allows for integrations with your current tooling. It is fast, safe, fun, and at-scale. What does OPA on AWS do?​ OPA on AWS provides a comprehensive Internal Developer Platform solution. It allows developers to write application logic, on AWS, without having to know how to provision and manage AWS services. OPA on AWS also allows platform engineering teams to easily manage all the resources and applications that run on AWS. What was the motivation behind building OPA on AWS?​ Enterprise are challenged to integrate with AWS while adhering to their standards, security guardrails and compliance. In addition, cloud engineers are a scarce resource that does not scale. Using platform engineering, this gap is shortened, thus enabling enterprise to improve their developer experience and scales the use of AWS Services securely. Is OPA on AWS an AWS Service?​ No, OPA on AWS is not a managed service. It is an open source platform reference implementation supporting integration with AWS Services for enterprises. Since OPA on AWS is using native AWS Services, it provides all the benefits and scale that AWS can offer along with a productive developer experience Who is the audience for OPA on AWS?​ OPA on AWS binds the AWS services into an enterprise ready offering. It was originally built for financial enterprise use cases to accommodate for security and regulatory compliance needs and the necessity for scale and efficiency. It is applicable for every company interested in scaling while still keeping the same tooling and additional internal and external standards. What support do you offer? How can I learn to use OPA on AWS?​ OPA on AWS is accompanied with documentation, detailed ReadMes, and a series of YouTube videos. All of these resources can help you learn more about the solution and get started. For any issue beyond the current available information, you can reach us by opening an issue via GitHub What is OPA on AWS’s license?​ OPA on AWS is licensed as Apache-2.0. What are the benefits for using OPA?​ A better developer experience and faster way to scale the use of AWS Services for enterprises. Please see the full features page What are the requirements to get started on OPA?​ Please read our documentation Getting started What is the price of OPA?​ OPA on AWS is free open source project. However the use of AWS Services is as per the service pricing of each service you use Is there a roadmap?​ Please see the features section under features Why is OPA on AWS integrated with Backstage?​ Backstage.io is a mature CNCF project, and has been widely adopted across the market. By integrating with Backstage.io, users of OPA on AWS can benefit from +100 plugins and a large community (+20k). This allows customers to customize their environments, and keep existing tooling, while still working on AWS. Building on Backstage.io has helped to expedite the journey of OPA on AWS, and bring more value to our customers. How can OPA on AWS accelerate applications migration?​ Please see our Migration page What happens if Backstage.io releases an update? How will OPA on AWS accommodate updates?​ OPA on AWS lists the latest tested version of Backstage.io with OPA on AWS plugins. The solution is decoupled from Backstage.io, therefore it should be possible to upgrade backstage and install the plugins afterwards. However, Backstage.io may introduce breaking changes and therefore we publish the last tested plugin version. How can I report bugs or submit feature requests?​ Please submit any issues and requests via the public repository Will AWS supply templates or examples? How will they be maintained?​ There are many samples and examples provided, please see this table. Will this make the DevOps team obsolete?​ OPA on AWS helps scale DevOps teams and enables the development teams to own their infrastructure and applications and reduce the bottleneck from the DevOps team. How secure is this solution? Has it been reviewed by a third party?​ The solution was designed for a large financial customer adhering to financial services customer regulation and AWS best practices. The solution have been through an AWS security review. How does OPA on AWS differ from AWS console?​ OPA on AWS aims to provide a productive, efficient, and delightful developer experience by providing a simplified way to use AWS. By nature, the AWS console will enable the skilled cloud engineer to fine-tune and define their needs, however, OPA on AWS will enable a persona to build on AWS without having to know how to operate all the knobs and dials. What is an Internal Developing Platform (IDP)?​ Please refer to platformengineering.org Does OPA on AWS have a CLI?​ Not yet - Please see features Have an additional question? Reach out to us at fsi-pace-pe@amazon.com","keywords":"","version":"Next"},{"title":"Features","type":0,"sectionRef":"#","url":"/opa-test/docs/features","content":"","keywords":"","version":"Next"},{"title":"Version 0.2​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#version-02","content":" ","version":"Next","tagName":"h2"},{"title":"1. Platform engineer scope​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#1-platform-engineer-scope","content":" Feature\tDescriptionDynamic environment provider provisioning\tCreate unlimited number of providers on multiple accounts and regions ECS environment provider\tCreate an ECS(Elastic container servicer) based provider Serverless environment provider\tCreate a serverless based provider Abstracted AWS environment\tCreate a environment of which applications and resources can be created Application pipeline\tCreate a pipeline for each application to support IAC provisioning and code change stage Environment Deployment pipeline\tCreate a pipeline to deploy the code base of an application to another environment Resource Binding\tAllow Binding resources to application to provide access and sharing capabilities for AWS resources Deploy to additional environments\tAllow the deployment of an application to additional environments Environments selector\tToggle between the environments of which the application is deployed and present relevant information for the current selected environment Segregated auditing\tAudit actions from platform and pipeline to a segregated auditing table of the target environment Environment level\tAllow to define a number representing the level of the environment thus creates hierarchies that are used for deployments Deployment requires approval\tConfigure how the pipelines should execute against an environment automatic / require approval Delete app\tRemove an application from an environment Delete provider\tRemove a provider Centralized pipelines\tLoad pipelines dynamically from a centralized repository Component Pending page\tPresent a partial page while the component IAC pipeline is still processing Terraform/CDK pipelines\tSupport both terraform and CDK pipelines to provision resources  ","version":"Next","tagName":"h3"},{"title":"2. Application developer scope​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#2-application-developer-scope","content":" Feature\tDescriptionClone repository while resources are provisioned\tThe ability to clone the repository immediately after it was created without waiting for the pipeline to provision the infrastructure Start and stop ECS task\tStart and stop the ECS task to load the latest container changes Change ECS task environment variable\tChange the ECS Task definition environment variables to inject new parameters to the app runtime View related app cloud resources\tView related application resources that are provisioned for this app View application logs\tView the CloudWatch logs for the application Visualize application software catalog relationship\tView the application relationship including environments, shared resources and owner Automatic deployment for additional environment\tDeploy the application to another environment with a click of a button Delete app\tDelete the application and it's related resources Bind application to resource\tPermit an application to use a shared resource such as RDS database, S3 bucket, EFS etc. View application CI/CD pipelines\tView the application CI/CD pipelines  ","version":"Next","tagName":"h3"},{"title":"Coming up​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#coming-up","content":" Feature\tScope\tDescription\tTimelineEKS environment provider\tPlatform Engineer\tCreate a Kubernetes based provider\tJan 2024 Environment Binding\tPlatform Engineer\tBind Environments to allow network communication across multiple VPC's through AWS Transit gateway\tFebruary 2024  ","version":"Next","tagName":"h2"},{"title":"Provided examples and templates​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#provided-examples-and-templates","content":" Feature\tDescription\tTypeAWS ECS Environment Provider\ta provider IAC for ECS runtime\tProvider AWS Serverless Environment Provider\ta provider IAC for Serverless runtime\tProvider AWS RDS Database\tan RDS database template\tResource Node.js Terraform Web App\ta node.js application provisioning by terraform\tApplication Node.js Express Web App With RDS\ta node.js application with a baked in starter code to connect to RDS database\tApplication Node.js Express Web App\ta node.js application\tApplication Python Flask starter application\ta python flask web server application\tApplication Serverless REST API (TypeScript)\ta lambda based serverless REST API application template for typescript\tApplication Java Spring Boot Web Service\ta java springboot application\tApplication  ","version":"Next","tagName":"h2"},{"title":"Backlog​","type":1,"pageTitle":"Features","url":"/opa-test/docs/features#backlog","content":" Feature\tScope\tDescription ","version":"Next","tagName":"h2"},{"title":"Intro","type":0,"sectionRef":"#","url":"/opa-test/docs/intro","content":"","keywords":"","version":"Next"},{"title":"What is OPA on AWS?​","type":1,"pageTitle":"Intro","url":"/opa-test/docs/intro#what-is-opa-on-aws","content":" Orchestrate Platforms and Application (OPA) on AWS brings the AWS cloud closer to your developers. The platform allows enterprise customers to build environments and applications on AWS without requiring application developers to upskill on cloud expertise. OPA on AWS is a reference implementation for an enterprise grade fully integrated internal developer platform. Improving the developer's workflow with a secure and scalable experience for non-cloud developers.  OPA on AWS is built on a Cloud Native Computing Foundation (CNCF) project, Backstage, which is an open platform for building developer portals. The Backstage platform itself has been adopted by over 900 companies as their primary developer portal in the past 3 years and has over 100 plugins available for its end users. OPA on AWS takes Backstage to the next level by seamlessly integrating it with AWS and packaging it together for enterprise use.  ","version":"Next","tagName":"h2"},{"title":"Why did we build OPA on AWS?​","type":1,"pageTitle":"Intro","url":"/opa-test/docs/intro#why-did-we-build-opa-on-aws","content":" Enterprise customers are challenged to integrate with AWS Services while adhering to their operation standards, security guardrails and compliance. In addition, cloud engineers and dev-ops teams are a scarce resource that do not scale. Platform engineering helps to reduce this bottleneck and to enable enterprises to scale and improve their developer experience and the use of AWS Services securely.  ","version":"Next","tagName":"h2"},{"title":"What's included?​","type":1,"pageTitle":"Intro","url":"/opa-test/docs/intro#whats-included","content":" The open source solution includes the following:  Complete source code to provision a new platform.Templates and examples to create environments, providers, applications and AWS resources.Backstage plugins and plugins source code.Predefined CI/CD centralized pipelines for more than 12 common patterns.Documentation, support videos, and a workshop.  Refer to the features page for a complete list of capabilities.  ","version":"Next","tagName":"h2"},{"title":"Getting Started​","type":1,"pageTitle":"Intro","url":"/opa-test/docs/intro#getting-started","content":" Get started by creating a new platform ","version":"Next","tagName":"h2"},{"title":"Migration from on-prem to OPA on AWS","type":0,"sectionRef":"#","url":"/opa-test/docs/migrations/migration-onprem","content":"Migration from on-prem to OPA on AWS Work in progress","keywords":"","version":"Next"},{"title":"Installation","type":0,"sectionRef":"#","url":"/opa-test/docs/getting-started/deploy-the-platform","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Installation","url":"/opa-test/docs/getting-started/deploy-the-platform#prerequisites","content":" ","version":"Next","tagName":"h2"},{"title":"Software prerequisites​","type":1,"pageTitle":"Installation","url":"/opa-test/docs/getting-started/deploy-the-platform#software-prerequisites","content":" The following software is required to perform the installation of the platform solution:  Unix-based operating system (Linux, MacOS, or the Windows Subsystem for Linux)node.js - 18.16 or higheryarn - v1.x (Yarn classic)aws-cliaws-cdkjqdockergit  note The installation instructions documented here were tested using the following versions: node v18.17aws-cdk v2.95yarn 1.22.19  ","version":"Next","tagName":"h3"},{"title":"Solution Platform prerequisites​","type":1,"pageTitle":"Installation","url":"/opa-test/docs/getting-started/deploy-the-platform#solution-platform-prerequisites","content":" Prior to installing the OPA solution platform, you will need to ensure that the following items are configured and available:  AWS Account ID and region - The solution will be installed into an AWS account and region. You will need the 12-digit account ID and must be able to log into the account with sufficient permissions to provision infrastructure resources. GitLab Community Edition EC2 AMI id - The solution will install a small GitLab instance where application source code will be stored. The AWS Marketplace provides a free, community edition of GitLab used by the solution. You will need to subscribe to the AWS Marketplace offering. Search for &quot;GitLab Community Edition&quot; by GitLab or use a direct link: https://aws.amazon.com/marketplace/pp/prodview-w6ykryurkesjqOnce your account is subscribed to the GitLab CE Marketplace offering, save the EC2 AMI for the appropriate region from the &quot;Launch new instance&quot; page as shown in the image below (do not actually launch an instance as this will be done for you during installation). Alternatively, you can query for the AMI using the AWS CLI (substitute the appropriate region value for the --region option): aws ec2 describe-images --owners &quot;aws-marketplace&quot; --filters &quot;Name=name,Values=*GitLab CE 16.4.0*&quot; --query 'Images[].[ImageId]' --region us-west-2 --output text GitLab Runner image - The solution will set up an EC2 instance as a GitLab Runner to execute GitLab CI/CD pipelines. The Amazon-provided &quot;Jammy&quot; image will be used for the runner image. Save the EC2 AMI for the appropriate region for this AMI. The following AMI command will return the appropriate image id. Replace the value for &quot;--region&quot; to reflect your target region: aws ec2 describe-images --owners &quot;amazon&quot; --filters &quot;Name=name,Values=*ubuntu-jammy-22.04-amd64-server-20230208*&quot; --query 'Images[].[ImageId]' --region us-west-2 --output text Route 53 Hosted Zone - The solution will ensure secure communcations and set up a certificate for your defined domain. Ensure that a public hosted zone is set up in your account. See the AWS documentation for creating a public hosted zone Okta authentication - The solution uses Okta and RoadieHQ Backstage plugins for authentication of users and groups. You will need a client id, client secret, and API key for configuration of the solution. If you wish to use Okta for authentication and do not have an existing account, you can sign up a free Workforce Identity Cloud developer account. Once the account is set up, you will need to configure an Okta API key for the RoadieHQ backend catalog pluginA client id and secret are required to set up a Backstage Okta authentication provider. See the Backstage Okta auth documentation for more details.Other identity providers are supported and could be substituted using different plugins. Configuring alternative authentication is not covered in this documentation. Refer to the Backstage Authentication documentation for details to install and configure alternative providers.  ","version":"Next","tagName":"h3"},{"title":"Installation​","type":1,"pageTitle":"Installation","url":"/opa-test/docs/getting-started/deploy-the-platform#installation-1","content":" Clone the repository and change to the repository location git clone https://github.com/awslabs/app-development-for-backstage-io-on-aws.git cd app-development-for-backstage-io-on-aws Configure the solution Copy the config/sample.env file to config/.envEdit the config/.env file and provide values for all of the environment variables. The file is commented to explain the purpose of the variables and requires some of the information from the Solution Platform Prerequisites section above. info The SECRET_GITLAB_CONFIG_PROP_apiToken variable does not need to be provided. This will be automatically configured during installation after the platform is deployed. Perform the installation Run make install The Makefile target will automatically perform the following actions: Install and configure BackstageInstall/update CDKDeploy the solution platform AWS infrastructureUpdate the configuration with GitLab informationPush a sample repository to GitLabBuild and deploy the Backstage image to AWS After the installation completes, the application will start up. Open a browser and navigate to the 'OPA on AWS' endpoint using the Route 53 hosted zone name that you configured (e.g. https://${R53_HOSTED_ZONE_NAME}). If any errors occur during installation, please review the install_{datestamp}.log file for details.  ","version":"Next","tagName":"h2"},{"title":"Installation FAQs​","type":1,"pageTitle":"Installation","url":"/opa-test/docs/getting-started/deploy-the-platform#installation-faqs","content":" I don't use Okta. Can i change the identity provider to another one?  Yes. Backstage supports many identity providers. Once you configure Backstage for your chosen provider, make sure the Backstage catalog is synced with the users and groups from your provider.    I want to use another source control that is not GitLab. How can i do that?  Backstage supports multiple source control providers which can be integrated through the Backstage config. OPA uses GitLab for several usage scenarios which you will need to migrate to another source control provider: Storing application source codeStoring template source codeStoring pipelines jobs and orchestrationUpdate the Client API plugin that interacts with GitLab to the new source control provider    I'm using Terraform, can I use this solution with Terraform to provision application resources?  Yes. We provide a Node.js Terraform application software template for demonstration. You may also write your own provider with Terraform.    For more Q &amp; A please see our FAQ Page ","version":"Next","tagName":"h2"},{"title":"Migration from OpenShift to OPA on AWS","type":0,"sectionRef":"#","url":"/opa-test/docs/migrations/migration-openshift","content":"Migration from OpenShift to OPA on AWS Work in progress","keywords":"","version":"Next"},{"title":"Architecture","type":0,"sectionRef":"#","url":"/opa-test/docs/techdocs/architecture","content":"","keywords":"","version":"Next"},{"title":"OPA Platform​","type":1,"pageTitle":"Architecture","url":"/opa-test/docs/techdocs/architecture#opa-platform","content":" The below diagram illustrates the major components of the OPA platform.    ","version":"Next","tagName":"h2"},{"title":"Application Environments​","type":1,"pageTitle":"Architecture","url":"/opa-test/docs/techdocs/architecture#application-environments","content":" The below diagram illustrates the relationships between an application and the environments it gets deployed to.    ","version":"Next","tagName":"h2"},{"title":"AWS Cloud Components of an Environment Provider​","type":1,"pageTitle":"Architecture","url":"/opa-test/docs/techdocs/architecture#aws-cloud-components-of-an-environment-provider","content":" The below diagram illustrates the AWS cloud components that make up an environment provider that could be used to host a containerized application.    ","version":"Next","tagName":"h2"},{"title":"How an Application Gets Created​","type":1,"pageTitle":"Architecture","url":"/opa-test/docs/techdocs/architecture#how-an-application-gets-created","content":"   ","version":"Next","tagName":"h2"},{"title":"Application CICD Pipeline​","type":1,"pageTitle":"Architecture","url":"/opa-test/docs/techdocs/architecture#application-cicd-pipeline","content":" The below diagram illustrates an application's CICD pipeline. The application is associated with 3 environments (DEV, QA, PROD).   ","version":"Next","tagName":"h2"},{"title":"Migration from PCF to OPA on AWS","type":0,"sectionRef":"#","url":"/opa-test/docs/migrations/migration-pcf","content":"Migration from PCF to OPA on AWS Work in progress","keywords":"","version":"Next"},{"title":"Create Apps","type":0,"sectionRef":"#","url":"/opa-test/docs/tutorials/create-app","content":"Create Apps 1. On the OPA on AWS website, navigate to the Create... menu. Search and choose Node.js Microservice. 2. Provide application information and select Next Step Parameter\tValue\tDescriptionName\tbanking-app\tA unique identifier for the application Description\tNode.js banking application running on ECS\tDescribes what the appplications's purpose will be Owner\tSelect 'developer'\tThe group or user that will be responsible for the entity AWS Environment\tthe dev-environment will be pre-selected since it is the only environment available\tThe AWS Environment in which you want to deploy your application to. The environment that we created in the previous step will already be selected for you 3. Provide Repository information and select Next Step Parameter\tValue\tDescriptionHost\tdefault value\tThe GitLab host name Owner Available\tdefault value\tThe GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project Repository\tbanking-app-repo\tThe name for the git repository 4. Review your inputs and select Create Your Application will begin to deploy! A Task Activity view will show you the progress of all of the actions executed to build out your application. This includes gathering environment information, creating secrets, scaffolding a new repository, creating an access token for the repo, and registering the entity with backstage.","keywords":"","version":"Next"},{"title":"Create Resources","type":0,"sectionRef":"#","url":"/opa-test/docs/tutorials/create-resources","content":"","keywords":"","version":"Next"},{"title":"Creating an RDS Database resource​","type":1,"pageTitle":"Create Resources","url":"/opa-test/docs/tutorials/create-resources#creating-an-rds-database-resource","content":" 1. On the OPA on AWS website, navigate to the Create... menu. Search and choose AWS RDS Database.    2. Provide resource information and select Next Step  Parameter\tValue\tDescriptionName\tpayment-db\tA unique identifier for the database Description\tA database for payment transactions\tDescribes what the database's purpose will be Owner\tSelect 'developer'\tThe group or user that will be responsible for the entity    3. Provide deployment information for the resource and select Next Step  Parameter\tValue\tDescriptionAWS Environment\tthe dev-environment will be pre-selected since it is the only environment available\tThe AWS Environment in which you want to deploy your application to. The environment that we created in the previous step will already be selected for you    4. Provide database configuration and select Next Step  Parameter\tValue\tDescriptionDatabase Name\tpaymentsdb\tThe name of a default database to create in the RDS instance Object Name\tuser\tThe name of the object that you will track in the default database. Database Engine\tSelect 'PostgreSQL'\tThe engine of the SQL database Database Size\tSelect 'Small (20GB)'\tThe size of the database that will be deployed    5. Provide Repository information and select Next StepChoose a repository for this database IAC source and entity information - you can use payments-db  6. Create the database   ","version":"Next","tagName":"h2"},{"title":"Videos","type":0,"sectionRef":"#","url":"/opa-test/docs/videos","content":"","keywords":"","version":"Next"},{"title":"YouTube playlist​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#youtube-playlist","content":"   ","version":"Next","tagName":"h2"},{"title":"Individual videos​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#individual-videos","content":" ","version":"Next","tagName":"h2"},{"title":"Introduction​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#introduction","content":"   ","version":"Next","tagName":"h3"},{"title":"Platform Engineering​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#platform-engineering","content":"   ","version":"Next","tagName":"h3"},{"title":"Application Developer​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#application-developer","content":"   ","version":"Next","tagName":"h3"},{"title":"Deploy an Application to other Environments​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#deploy-an-application-to-other-environments","content":"   ","version":"Next","tagName":"h3"},{"title":"Provision AWS Resources and Resource Binding​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#provision-aws-resources-and-resource-binding","content":"   ","version":"Next","tagName":"h3"},{"title":"Deploying Serverless APIs​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#deploying-serverless-apis","content":"   ","version":"Next","tagName":"h3"},{"title":"OPA Security and RBAC​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#opa-security-and-rbac","content":"   ","version":"Next","tagName":"h3"},{"title":"Orchestrating and Managing CI/CD​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#orchestrating-and-managing-cicd","content":"   ","version":"Next","tagName":"h3"},{"title":"Using Terraform to Orchestrate Applications​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#using-terraform-to-orchestrate-applications","content":"   ","version":"Next","tagName":"h3"},{"title":"Customizing your platform - Adding providers​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#customizing-your-platform---adding-providers","content":"   ","version":"Next","tagName":"h3"},{"title":"Customizing your platform - Adding Templates​","type":1,"pageTitle":"Videos","url":"/opa-test/docs/videos#customizing-your-platform---adding-templates","content":"  ","version":"Next","tagName":"h3"},{"title":"Create Environments","type":0,"sectionRef":"#","url":"/opa-test/docs/tutorials/create-environments","content":"","keywords":"","version":"Next"},{"title":"Create an Environment Provider​","type":1,"pageTitle":"Create Environments","url":"/opa-test/docs/tutorials/create-environments#create-an-environment-provider","content":" Lets now use AWS ECS Environment Provider template to provision our AWS Elastic Container Service(ECS) runtime environment. If you have completed the introduction section, you should be on the OPA landing page.  Hit the Create.. menu on the left and Choose the AWS ECS Environment Provider template.    Provide input parameters to tailor the environment provider resources.  Parameter\tValue\tDescriptionName\tbanking-dev-provider\tA unique identifier for the environment provider Prefix\tbankecs\tA short prefix used for AWS resource creation Description\tA Dev environment provider for containerized Retail Banking applications\tDescribes what the environment provider's purpose will be Owner\tSelect 'developers'\tThe group or user that will be responsible for the entity AWS Account Number\tget this value from the aws-account-id key on the Event Outputs section of the Event Dashboard\tThe AWS account where the environment provider will be created AWS Region\tSelect 'US East (N. Virginia)' Do not select any other region for the workshop\tThe AWS region to provision resources in Environment role arn\tget this value from the opa-env-provisioning-role-arn key on the Event Outputs tab of the Event Dashboard\tThe IAM role to be used for provisioning AWS resources in the target account and region CIDR\t10.0.0.0/24 (default)\tThe CIDR block to be provisioned for the VPC associated with the ECS cluster to be created    3. Select Next Step and Provide Repository information  In this step we provide information about the git repository where the Environment Provider source files will be published as part of executing the Software Template.  Parameter\tValue\tDescriptionHost:\tdefault value\tThe GitLab host name Owner:\tdefault value\tThe GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project Repository:\tbanking-dev-provider\tThe name for the git repository    4. Select Next Step, review your inputs and select Create    5. Environment Provider Entity Creation  Upon clicking Create, the template performs automated action steps. It gets info from AWS, fetches our ECS code and other configuration files from the reference folder, changes specific parts inside these files, and sets up a new git folder to store the files.    Once this git folder is ready, a CI/CD process will start automatically. It will use the code to set up your new ECS platform right away!  Now, let's proceed to the next step to an environment using the provider entity we just created.  ","version":"Next","tagName":"h2"},{"title":"Create an Environment​","type":1,"pageTitle":"Create Environments","url":"/opa-test/docs/tutorials/create-environments#create-an-environment","content":" To create an Environment Entity we will use the AWS Environment template from the software catalog section.  1. On the OPA on AWS website, navigate to the Create.. menu. From the list of available templates, choose the AWS Environment template card.  2. Provide input parameters to tailor the environment entity and click Next Step  Parameter\tValue\tDescriptionName\tbanking-dev\tA unique identifier for the environment Short Name\tbankdev\tA short identifier used for identification of environments Description\tBanking Development environment for containerized applications deployed to ECS\tDescribes the purpose of the environment Environment Type\tAWS ECS\tSpecifies the type of applications that can be deployed and managed in this environment Deployment Requires Approval\tNo\tAllows for blocking a CI/CD pipeline until approval is received. This is often set to 'No' for development and test, but 'Yes' for production Owner\tdevelopers\tThe group or user that will be responsible for the entity. Account Type\tSingle-account\tIndicates whether the environment supports one or more accounts Region Type\tSingle-region\tIndicates whether the environment supports one or more regions Category\tDevelopment\tIdentifies the intended purpose of the environment (dev, test, prod, etc) Classification\tpublic\tIdentifies visibility of the environment (public-facing, internal-facing, or private) System\tbanking\tIdentifies the relationship of this environment to a larger system. This can be used to group environments together. Heirarchy of the Environment\t1\tValue used to determine relative ordering for environments. Typical approaches are to use lower numbers for development and higher numbers for production. Providers\tbanking-dev-provider\tSelects one or more environment providers to attach to this environment. In this workshop, there is only one environment provider available, so the drop-down list is disabled and the available environment provider will be used.    2. Hit Next Step and fill in the remaining information:  Parameter\tValue\tDescriptionHost\tdefault value\tThe GitLab host name Owner\tdefault value\tThe GitLab namespace where this repository will belong to. It can be the name of organization, group, subgroup, user, or the project Repository\tbanking-dev\tThe name for the git repository  3. Hit Next Step and review your inputs. Hit Create    4. The template scaffolding action will fetch a catalog.yaml file (used to define entities), replace the placeholders with our input we just set, push the file to a new repo and register it to OPA on AWS.  Now that our Environment Entity is created, our developers can discover and point to the it during their app scaffolding process. Let's proceed to the next step and explore the ECS Environment Entity we just created. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}